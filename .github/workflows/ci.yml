name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  test-and-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Generate Prisma client
        run: |
          npm run db:generate
          
      - name: Run tests with coverage
        run: |
          cd backend
          npm run test:cov
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Check coverage threshold
        run: |
          cd backend
          npm run test:cov -- --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
          
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test-and-coverage
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Generate Prisma client
        run: |
          npm run db:generate
          
      - name: Build application
        run: |
          cd backend
          npm run build
          
      - name: Verify build artifacts
        run: |
          cd backend
          ls -la dist/
          
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Run ESLint
        run: |
          cd backend
          npm run lint
          
      - name: Check code formatting
        run: |
          cd backend
          npm run format:check || echo "Code formatting check failed - run 'npm run format' to fix"
          
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd backend && npm audit --audit-level=moderate
          
  database-migration:
    name: Database Migration Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Generate Prisma client
        run: |
          npm run db:generate
          
      - name: Check database migrations
        run: |
          npm run db:migrate:status || echo "Migration status check completed"
          
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-and-coverage, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Generate Prisma client
        run: |
          npm run db:generate
          
      - name: Run integration tests
        run: |
          cd backend
          npm run test:e2e
        env:
          CI: true
          
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test-and-coverage, build, lint-and-format, security-audit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Verify test coverage threshold
        run: |
          cd backend
          npm run test:cov -- --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
          
      - name: Verify all tests pass
        run: |
          cd backend
          npm test
          
      - name: Verify build succeeds
        run: |
          cd backend
          npm run build
          
      - name: Quality Gate Summary
        run: |
          echo "‚úÖ All quality gates passed!"
          echo "üìä Test coverage: Above 80%"
          echo "üèóÔ∏è Build: Successful"
          echo "üîç Linting: Passed"
          echo "üîí Security: Audit passed"
          echo "üéØ Ready for deployment!" 