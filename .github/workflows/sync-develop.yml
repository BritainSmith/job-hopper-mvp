name: Auto-Sync Develop with Main

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  sync-develop:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup GitHub CLI
        run: |
          # Try to use PAT if available, otherwise fall back to GITHUB_TOKEN
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "${{ secrets.PAT_TOKEN }}" | gh auth login --with-token
          else
            echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          fi

      - name: Fetch all branches
        run: |
          git fetch --all
          git branch -a

      - name: Check if sync is needed
        id: check-sync
        run: |
          # Fetch latest changes from both branches
          git fetch origin main
          git fetch origin develop
          
          # Check if develop is behind main
          DEVELOP_COMMIT=$(git rev-parse origin/develop)
          MAIN_COMMIT=$(git rev-parse origin/main)
          
          echo "Develop commit: $DEVELOP_COMMIT"
          echo "Main commit: $MAIN_COMMIT"
          
          if [ "$DEVELOP_COMMIT" != "$MAIN_COMMIT" ]; then
            echo "develop is behind main, sync needed"
            echo "needs_sync=true" >> $GITHUB_OUTPUT
            echo "develop_commit=$DEVELOP_COMMIT" >> $GITHUB_OUTPUT
            echo "main_commit=$MAIN_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "develop is up to date with main"
            echo "needs_sync=false" >> $GITHUB_OUTPUT
          fi

      - name: Create sync PR
        id: create-sync-pr
        if: steps.check-sync.outputs.needs_sync == 'true'
        run: |
          # Create a new branch for the sync
          SYNC_BRANCH="sync/develop-with-main-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $SYNC_BRANCH
          
          # Merge main into the sync branch
          git merge origin/main --no-edit
          
          # Push the sync branch
          git push origin $SYNC_BRANCH
          
          # Create PR using GitHub API with curl
          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "ðŸ”„ Auto-sync develop with main",
              "body": "Automatic sync of develop branch with latest main changes. All CI/CD checks must pass before merge.",
              "base": "develop",
              "head": "'$SYNC_BRANCH'"
            }')
          
          echo "PR Response: $PR_RESPONSE"
          
          # Extract PR number from response
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number // empty')
          
          if [ ! -z "$PR_NUMBER" ]; then
            echo "PR created successfully: #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "Failed to create PR"
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi

      - name: Auto-merge sync PR
        if: steps.check-sync.outputs.needs_sync == 'true' && steps.create-sync-pr.outputs.pr_number != ''
        run: |
          PR_NUMBER="${{ steps.create-sync-pr.outputs.pr_number }}"
          
          if [ ! -z "$PR_NUMBER" ]; then
            echo "Enabling auto-merge for PR #$PR_NUMBER"
            
            # Enable auto-merge using GitHub API
            curl -s -X PUT \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
              -d '{
                "merge_method": "squash",
                "commit_title": "ðŸ”„ Auto-sync develop with main",
                "commit_message": "Automatic sync of develop branch with latest main changes"
              }'
          fi

      - name: Skip sync
        if: steps.check-sync.outputs.needs_sync == 'false'
        run: |
          echo "âœ… Develop is already up to date with main"
          echo "No sync needed at $(date -u +"%Y-%m-%d %H:%M:%S UTC")" 